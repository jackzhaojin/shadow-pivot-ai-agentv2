import { NextRequest, NextResponse } from 'next/server';
import JSZip from 'jszip';

export async function POST(request: NextRequest) {
  try {
    console.log('üì• API - Download Figma Spec - POST request received');
    
    const requestBody = await request.json();
    const { selectedFigmaSpec, figmaSelectionReasoning, executionTrace, userGuid } = requestBody;
    
    console.log('üì¶ API - Download Figma Spec called with:', {
      hasSelectedSpec: !!selectedFigmaSpec,
      selectedSpecKeys: selectedFigmaSpec ? Object.keys(selectedFigmaSpec) : [],
      selectedSpecName: selectedFigmaSpec?.name,
      hasReasoning: !!figmaSelectionReasoning,
      reasoningLength: figmaSelectionReasoning?.length || 0,
      hasExecutionTrace: !!executionTrace,
      userGuid,
      requestBodyKeys: Object.keys(requestBody)
    });

    return await createDownload({ selectedFigmaSpec, figmaSelectionReasoning, executionTrace, userGuid });

  } catch (error) {
    console.error('üí• API - Download Figma spec failed:', error);
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'Failed to generate download'
    }, { status: 500 });
  }
}

interface DownloadRequest {
  selectedFigmaSpec: {
    name?: string;
    [key: string]: unknown;
  };
  figmaSelectionReasoning: string;
  executionTrace: Record<string, unknown>;
  userGuid: string;
}

async function createDownload({ selectedFigmaSpec, figmaSelectionReasoning, executionTrace, userGuid }: DownloadRequest) {
  if (!selectedFigmaSpec) {
    console.error('‚ùå API - No selectedFigmaSpec provided');
    return NextResponse.json({
      success: false,
      error: 'No Figma specification selected for download'
    }, { status: 400 });
  }

  console.log('üèóÔ∏è API - Creating ZIP archive...');
  
  // Create ZIP archive with Figma specification and metadata
  const zip = new JSZip();
  
  // Add the main Figma specification file
  const figmaSpecJson = JSON.stringify(selectedFigmaSpec, null, 2);
  console.log('üìÑ API - Adding figma-specification.json:', {
    size: figmaSpecJson.length,
    specName: selectedFigmaSpec.name
  });
  zip.file('figma-specification.json', figmaSpecJson);
  
  // Add selection reasoning
  if (figmaSelectionReasoning) {
    console.log('üìù API - Adding selection-reasoning.txt:', {
      size: figmaSelectionReasoning.length
    });
    zip.file('selection-reasoning.txt', figmaSelectionReasoning);
  }
  
  // Add execution trace and metadata
  if (executionTrace) {
    const executionTraceJson = JSON.stringify(executionTrace, null, 2);
    console.log('üîç API - Adding execution-trace.json:', {
      size: executionTraceJson.length
    });
    zip.file('execution-trace.json', executionTraceJson);
  }

  // Add metadata file
  const metadata = {
    generatedAt: new Date().toISOString(),
    userGuid,
    specName: selectedFigmaSpec.name,
    specDescription: selectedFigmaSpec.description,
    downloadVersion: '1.0.0',
    aiAgent: 'TSLA AI UI Agent - Release 1.0 MVP'
  };
  const metadataJson = JSON.stringify(metadata, null, 2);
  console.log('üìä API - Adding metadata.json:', {
    size: metadataJson.length,
    metadata
  });
  zip.file('metadata.json', metadataJson);
  
  // Add a README file explaining the contents
  const readmeContent = `# Figma Specification Download - ${selectedFigmaSpec.name}

Generated by TSLA AI UI Agent - Release 1.0 MVP
Generated at: ${metadata.generatedAt}

## Contents

- **figma-specification.json**: The main Figma specification file with components and design details
- **selection-reasoning.txt**: AI reasoning for why this specification was selected as the best option
- **execution-trace.json**: Complete log of the AI agent execution process
- **metadata.json**: Technical metadata about the generation process

## Specification Details

- **Name**: ${selectedFigmaSpec.name}
- **Description**: ${selectedFigmaSpec.description}
- **Components**: ${selectedFigmaSpec.components ? JSON.stringify(selectedFigmaSpec.components) : 'N/A'}

## Usage

This Figma specification can be used to implement the UI component design. The specification includes:
1. Component structure and hierarchy
2. Design properties and styling
3. Layout specifications
4. Interactive behavior definitions

Generated with AI-powered design analysis and quality evaluation.
`;
  
  console.log('üìö API - Adding README.md:', {
    size: readmeContent.length
  });
  zip.file('README.md', readmeContent);
  
  console.log('‚öôÔ∏è API - Generating ZIP file...');
  
  // Generate ZIP file as buffer
  const zipBuffer = await zip.generateAsync({ 
    type: 'arraybuffer',
    compression: 'DEFLATE',
    compressionOptions: { level: 6 }
  });
  
  console.log('‚úÖ API - Figma spec ZIP generated successfully:', {
    specName: selectedFigmaSpec.name,
    zipSize: zipBuffer.byteLength,
    files: ['figma-specification.json', 'selection-reasoning.txt', 'execution-trace.json', 'metadata.json', 'README.md']
  });

  const filename = `figma-spec-${selectedFigmaSpec.name?.replace(/[^a-zA-Z0-9]/g, '-') || 'download'}-${Date.now()}.zip`;
  
  console.log('üì§ API - Sending response:', {
    filename,
    zipSize: zipBuffer.byteLength,
    contentType: 'application/zip'
  });

  // Return the ZIP file as response
  return new NextResponse(zipBuffer, {
    status: 200,
    headers: {
      'Content-Type': 'application/zip',
      'Content-Disposition': `attachment; filename="${filename}"`,
      'Content-Length': zipBuffer.byteLength.toString(),
    },
  });
}
