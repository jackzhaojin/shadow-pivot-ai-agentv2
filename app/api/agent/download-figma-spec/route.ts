import { NextRequest, NextResponse } from 'next/server';
import JSZip from 'jszip';

export async function POST(request: NextRequest) {
  try {
    const { selectedFigmaSpec, figmaSelectionReasoning, executionTrace, userGuid } = await request.json();
    
    console.log('ðŸ“¦ API - Download Figma Spec called with:', {
      hasSelectedSpec: !!selectedFigmaSpec,
      hasReasoning: !!figmaSelectionReasoning,
      hasExecutionTrace: !!executionTrace,
      userGuid
    });

    if (!selectedFigmaSpec) {
      return NextResponse.json({
        success: false,
        error: 'No Figma specification selected for download'
      }, { status: 400 });
    }

    // Create ZIP archive with Figma specification and metadata
    const zip = new JSZip();
    
    // Add the main Figma specification file
    zip.file('figma-specification.json', JSON.stringify(selectedFigmaSpec, null, 2));
    
    // Add selection reasoning
    if (figmaSelectionReasoning) {
      zip.file('selection-reasoning.txt', figmaSelectionReasoning);
    }
    
    // Add execution trace and metadata
    if (executionTrace) {
      zip.file('execution-trace.json', JSON.stringify(executionTrace, null, 2));
    }
    
    // Add metadata file
    const metadata = {
      generatedAt: new Date().toISOString(),
      userGuid,
      specName: selectedFigmaSpec.name,
      specDescription: selectedFigmaSpec.description,
      downloadVersion: '1.0.0',
      aiAgent: 'TSLA AI UI Agent - Release 1.0 MVP'
    };
    zip.file('metadata.json', JSON.stringify(metadata, null, 2));
    
    // Add a README file explaining the contents
    const readmeContent = `# Figma Specification Download - ${selectedFigmaSpec.name}

Generated by TSLA AI UI Agent - Release 1.0 MVP
Generated at: ${metadata.generatedAt}

## Contents

- **figma-specification.json**: The main Figma specification file with components and design details
- **selection-reasoning.txt**: AI reasoning for why this specification was selected as the best option
- **execution-trace.json**: Complete log of the AI agent execution process
- **metadata.json**: Technical metadata about the generation process

## Specification Details

- **Name**: ${selectedFigmaSpec.name}
- **Description**: ${selectedFigmaSpec.description}
- **Components**: ${selectedFigmaSpec.components ? JSON.stringify(selectedFigmaSpec.components) : 'N/A'}

## Usage

This Figma specification can be used to implement the UI component design. The specification includes:
1. Component structure and hierarchy
2. Design properties and styling
3. Layout specifications
4. Interactive behavior definitions

Generated with AI-powered design analysis and quality evaluation.
`;
    
    zip.file('README.md', readmeContent);
    
    // Generate ZIP file as buffer
    const zipBuffer = await zip.generateAsync({ 
      type: 'arraybuffer',
      compression: 'DEFLATE',
      compressionOptions: { level: 6 }
    });
    
    console.log('âœ… API - Figma spec ZIP generated successfully:', {
      specName: selectedFigmaSpec.name,
      zipSize: zipBuffer.byteLength,
      files: ['figma-specification.json', 'selection-reasoning.txt', 'execution-trace.json', 'metadata.json', 'README.md']
    });

    // Return the ZIP file as response
    return new NextResponse(zipBuffer, {
      status: 200,
      headers: {
        'Content-Type': 'application/zip',
        'Content-Disposition': `attachment; filename="figma-spec-${selectedFigmaSpec.name?.replace(/[^a-zA-Z0-9]/g, '-') || 'download'}-${Date.now()}.zip"`,
        'Content-Length': zipBuffer.byteLength.toString(),
      },
    });

  } catch (error) {
    console.error('ðŸ’¥ API - Download Figma spec failed:', error);
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'Failed to generate download'
    }, { status: 500 });
  }
}
